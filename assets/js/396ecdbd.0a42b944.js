"use strict";(self.webpackChunkmdbw_atlas_operator=self.webpackChunkmdbw_atlas_operator||[]).push([[5081],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),l=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return r?o.createElement(f,a(a({ref:t},u),{},{components:r})):o.createElement(f,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var l=2;l<i;l++)a[l]=r[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8181:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var o=r(7462),n=r(3366),i=(r(7294),r(3905)),a=["components"],c={sidebar_position:4},s="Revisit the docker compose file (optional)",l={unversionedId:"migrate-to-cloud/simplified-docker-compose",id:"migrate-to-cloud/simplified-docker-compose",title:"Revisit the docker compose file (optional)",description:"If you created a Docker Compose setup earlier, and want to tweak it to use the new cloud database, you can use the following yaml.",source:"@site/docs/migrate-to-cloud/4-simplified-docker-compose.md",sourceDirName:"migrate-to-cloud",slug:"/migrate-to-cloud/simplified-docker-compose",permalink:"/mern-k8s/docs/migrate-to-cloud/simplified-docker-compose",draft:!1,editUrl:"https://github.com/joellord/mern-k8s/docs/migrate-to-cloud/4-simplified-docker-compose.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Set up the backend to use Atlas",permalink:"/mern-k8s/docs/migrate-to-cloud/setup-backend"},next:{title:"Deploy to Kubernetes",permalink:"/mern-k8s/docs/category/deploy-to-kubernetes"}},u={},p=[],d={toc:p};function m(e){var t=e.components,r=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"revisit-the-docker-compose-file-optional"},"Revisit the docker compose file (optional)"),(0,i.kt)("p",null,"If you created a Docker Compose setup earlier, and want to tweak it to use the new cloud database, you can use the following ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  backend:\n    image: mongodb+srv://mern-k8s:mern-k8s@cluster0.wc3ix.mongodb.net\n    ports:  \n    - "5000:5000" \n  client:\n    image: docker.io//joellord/mern-k8s-front\n    ports:\n      - "8080:80"\n')),(0,i.kt)("p",null,"This new docker compose file is much simpler as there is no need for that additional container for the database."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmdbw_atlas_operator=self.webpackChunkmdbw_atlas_operator||[]).push([[7768],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3724:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},c="Set up the backend to use Atlas",l={unversionedId:"migrate-to-cloud/setup-backend",id:"migrate-to-cloud/setup-backend",title:"Set up the backend to use Atlas",description:"Now's the time to change your application to use the cloud database rather than the local container version. The process is fairly straightforward since the application uses an environment variable to specify the connection string.",source:"@site/docs/migrate-to-cloud/3-setup-backend.md",sourceDirName:"migrate-to-cloud",slug:"/migrate-to-cloud/setup-backend",permalink:"/docs/migrate-to-cloud/setup-backend",draft:!1,editUrl:"https://github.com/joellord/mern-k8s/docs/migrate-to-cloud/3-setup-backend.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create a MongoDB Atlas cluster",permalink:"/docs/migrate-to-cloud/setup-cluster"},next:{title:"Revisit the docker compose file (optional)",permalink:"/docs/migrate-to-cloud/simplified-docker-compose"}},u={},p=[{value:"Stop existing containers",id:"stop-existing-containers",level:2},{value:"Restart the back and front containers",id:"restart-the-back-and-front-containers",level:2},{value:"Test the application",id:"test-the-application",level:2}],d={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set-up-the-backend-to-use-atlas"},"Set up the backend to use Atlas"),(0,a.kt)("p",null,"Now's the time to change your application to use the cloud database rather than the local container version. The process is fairly straightforward since the application uses an environment variable to specify the connection string."),(0,a.kt)("h2",{id:"stop-existing-containers"},"Stop existing containers"),(0,a.kt)("p",null,"First, stop any existing containers. You won't need the database container anymore, and the other two will be restarted in the next steps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop mern-k8s-back mern-k8s-front mongodb\n")),(0,a.kt)("h2",{id:"restart-the-back-and-front-containers"},"Restart the back and front containers"),(0,a.kt)("p",null,"Let's restart the frontend container. For this container, there are no changes as the database migration should not affect the frontend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --rm --name mern-k8s-front -p 8080:80 -e BASE_URL="http://localhost:5000" $DOCKER_HUB_USERNAME/mern-k8s-front\n')),(0,a.kt)("p",null,"You can also restart the backend server. This time, you will use the Atlas connection string rather than connecting to the local container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm --name mern-k8s-back -p 5000:5000 -e PORT=5000 -e CONN_STR=$ATLAS_CONNECTION_STRING --network mern-k8s $DOCKER_HUB_USERNAME/mern-k8s-back\n")),(0,a.kt)("h2",{id:"test-the-application"},"Test the application"),(0,a.kt)("p",null,"Once again, open up your browser to ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:5000"},"localhost:5000")," to test out the application. Because you migrated to the cloud database, you won't see the data you had earlier. However, this data is now persisted. Even if you restart your containers, you can still access the data from the Atlas cluster."))}h.isMDXComponent=!0}}]);
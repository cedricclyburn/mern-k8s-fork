"use strict";(self.webpackChunkmdbw_atlas_operator=self.webpackChunkmdbw_atlas_operator||[]).push([[4154],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),k=o,h=p["".concat(s,".").concat(k)]||p[k]||d[k]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3819:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:3},s="Create a network",l={unversionedId:"containerization/network",id:"containerization/network",title:"Create a network",description:"In order for the containers to find each other, you will need to create a Docker network. Understanding how networking work in the containers land is out of the scope of this specific workshop. However, let's see how we can get our backend to connect to the MongoDB container.",source:"@site/docs/containerization/3-network.md",sourceDirName:"containerization",slug:"/containerization/network",permalink:"/mern-k8s/docs/containerization/network",draft:!1,editUrl:"https://github.com/joellord/mern-k8s/docs/containerization/3-network.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Containerize the backend",permalink:"/mern-k8s/docs/containerization/backend"},next:{title:"Containerize the frontend",permalink:"/mern-k8s/docs/containerization/frontend"}},u={},d=[{value:"Stop existing containers",id:"stop-existing-containers",level:2},{value:"Create a Docker Network",id:"create-a-docker-network",level:2},{value:"Restart the database container",id:"restart-the-database-container",level:2},{value:"Restart the backend",id:"restart-the-backend",level:2},{value:"Test out the backend",id:"test-out-the-backend",level:2}],p={toc:d};function k(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-network"},"Create a network"),(0,a.kt)("p",null,"In order for the containers to find each other, you will need to create a Docker network. Understanding how networking work in the containers land is out of the scope of this specific workshop. However, let's see how we can get our backend to connect to the MongoDB container."),(0,a.kt)("h2",{id:"stop-existing-containers"},"Stop existing containers"),(0,a.kt)("p",null,"Make sure that you stop existing containers with the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker stop")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop mongodb\ndocker stop mern-k8s-back\n")),(0,a.kt)("h2",{id:"create-a-docker-network"},"Create a Docker Network"),(0,a.kt)("p",null,"Creating a Docker network requires a single command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker network create mern-k8s\n")),(0,a.kt)("p",null,"You will now be able to restart your containers, and use this newly created network with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--network")," flag."),(0,a.kt)("h2",{id:"restart-the-database-container"},"Restart the database container"),(0,a.kt)("p",null,"Restart your database container, but with the network flag this time. Now, this container will be reachable by the name provided with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--name")," flag. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --name mongodb --rm -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=user -e MONGO_INITDB_ROOT_PASSWORD=pass --network mern-k8s mongo\n")),(0,a.kt)("h2",{id:"restart-the-backend"},"Restart the backend"),(0,a.kt)("p",null,"Restart the backend container. This time, specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"--network")," flag, and change the connection string to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"mongodb")," container rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d --rm --name mern-k8s-back -p 5000:5000 -e PORT=5000 -e CONN_STR="mongodb://user:pass@mongodb:27017" --network mern-k8s $DOCKER_HUB_USERNAME/mern-k8s-back\n')),(0,a.kt)("h2",{id:"test-out-the-backend"},"Test out the backend"),(0,a.kt)("p",null,"Try reaching your backend again."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:5000/healthz\n")),(0,a.kt)("p",null,"This time, you should see that the server is up and running, and that the database is connected."))}k.isMDXComponent=!0}}]);
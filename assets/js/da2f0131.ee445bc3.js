"use strict";(self.webpackChunkmdbw_atlas_operator=self.webpackChunkmdbw_atlas_operator||[]).push([[9721],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7782:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:3},l="Create an ingress",c={unversionedId:"deploy-to-k8s/create-ingress",id:"deploy-to-k8s/create-ingress",title:"Create an ingress",description:"You now have two pods running your backend service, but they aren't accessible from the outside of the cluster. In order for the frontend to connect to it, they will need to be exposed. This is where the ingress will come into play.",source:"@site/docs/deploy-to-k8s/3-create-ingress.md",sourceDirName:"deploy-to-k8s",slug:"/deploy-to-k8s/create-ingress",permalink:"/mern-k8s/docs/deploy-to-k8s/create-ingress",draft:!1,editUrl:"https://github.com/joellord/mern-k8s/tree/main/docs/docs/deploy-to-k8s/3-create-ingress.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Deploy the backend",permalink:"/mern-k8s/docs/deploy-to-k8s/deploy-backend"},next:{title:"Deploy the frontend",permalink:"/mern-k8s/docs/deploy-to-k8s/deploy-frontend"}},p={},u=[{value:"Create the ingress definition",id:"create-the-ingress-definition",level:2},{value:"Apply the ingress",id:"apply-the-ingress",level:2},{value:"Test the backend",id:"test-the-backend",level:2}],d={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-an-ingress"},"Create an ingress"),(0,i.kt)("p",null,"You now have two pods running your backend service, but they aren't accessible from the outside of the cluster. In order for the frontend to connect to it, they will need to be exposed. This is where the ingress will come into play."),(0,i.kt)("h2",{id:"create-the-ingress-definition"},"Create the ingress definition"),(0,i.kt)("p",null,"Ingresses use a set of rules to redirect traffic to specifc services. For this simple ingress, you will redirect all incoming traffic to the backend service. This will let you test the backend."),(0,i.kt)("p",null,"Create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"ingress.yaml"),"."),(0,i.kt)("p",null,"Just like any other Kubernetes object, you will start with the ",(0,i.kt)("inlineCode",{parentName:"p"},"apiVersion"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"kind"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"spec"),"."),(0,i.kt)("p",null,"In the spec, you will list a single rule to redirect the traffic to the ",(0,i.kt)("inlineCode",{parentName:"p"},"mern-k8s-back")," service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: mern-k8s-ingress\nspec:\n  rules:\n    - http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: mern-k8s-back\n                port:\n                  number: 80\n")),(0,i.kt)("h2",{id:"apply-the-ingress"},"Apply the ingress"),(0,i.kt)("p",null,"You can apply this ingress to your cluster using ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f ./ingress.yaml\n")),(0,i.kt)("h2",{id:"test-the-backend"},"Test the backend"),(0,i.kt)("p",null,"Now that the backend service is exposed, you can test it out. To do so, you will need the IP address or domain name for your Kubernetes cluster. If you are running a Minikube instance, this address can be found using the ",(0,i.kt)("inlineCode",{parentName:"p"},"minikube ip")," command. "),(0,i.kt)("p",null,"Test out the API by using a curl command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl $(minikube ip)/healthz\n")),(0,i.kt)("p",null,"This should output the status of the server."))}f.isMDXComponent=!0}}]);